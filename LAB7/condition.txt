1. Написать монитор для управления параллельным доступом к очереди или стеку (Согласно вариантам - см.
ниже):
Интерфейс монитора для очереди:

class MonitorQueuer
{
	MonitorQueue(int nSize); // nSize - размер очереди
	~MonitorQueue();
	void AddHead (type & nElement); // добавить элемент в «голову» очереди
	char RemoveTail(); // удалить элемент из «хвоста» очереди
};

2. Кольцевая очередь (стек) реализуется массивом. Размер кольцевой очереди задается в конструкторе.

3. Если поток обращается к методу Add… (Push) монитора, а очередь (стек) оказывается в этот момент полной, то
монитор переводит поток в состояние ожидания до тех пор, пока в очереди (в стеке) не окажутся свободные ячейки.

5. Если поток обращается к методу Remove (Pop) монитора, а очередь(стек) оказывается в этот момент пустой, то
монитор переводит поток в состояние ожидания до тех пор, пока в очереди (в стеке) не окажется новый элемент.

Дополнительные требования:
Для тестирования монитора написать программу для консольного процесса, который состоит из потока main и
нескольких потоков consumer и producer.

Поток main должен выполнять следующие действия:
 создать монитор очереди (стека), размер которой вводится пользователем с клавиатуры;
 [Уточнения ] создать объекты синхронизации:
1. для ограничения доступа потоков к верхушке стека или к двум концевым элементам очереди;
2. для блокировки потоков producer - если стек(очередь) заполнен(а);
3. для блокировки потоков consumer - если стек(очередь) пуст(а);
 ввести с клавиатуры количество потоков producer и количество потоков consumer, которые он должен
запустить;
 для каждого из потоков producer и consumer ввести количество продуктов (тип массива в индивидуальном
варианте), которые эти потоки должны соответственно произвести и потребить;
 создать требуемое количество потоков producer и consumer;
 передать в качестве параметров каждому потоку producer кол-во продуктов (целое число и сам продукт
(элемент ), который поток должен произвести (записать в очередь\стек);
 передать в качестве параметра каждому потоку consumer положительное целое число, которое обозначает
количество продуктов, которое поток должен потребить (удалить из очереди\стека);
 завершить свою работу после окончания работы всех потоков producer и consumer.

Поток producer должен выполнять следующие действия:
- произвести (записать в очередь\стек) требуемое количество экземпляров продукта ;
- после добавления очередного числа в очередь(стек) выводить на консоль сообщение следующего вида:
"Произведен элемент (продукт) N ", где N ,записано в очередь\стек.
Поток consumer должен выполнять следующие действия:
- потребить (удалить из очереди\стека) заданное количество продуктов;
- при извлечении очередного символа из очереди (стека), выводить на консоль сообщение следующего вида:
"\tУпотреблен элемент (продукт) N ", где N – элемент (продукт) который извлечен из очереди\стека.